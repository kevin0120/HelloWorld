package main

import (
	"fmt"
)

func Data_decoding(original []byte) (Torque []uint16, Angle []uint32) {
	var byte_num bool
	var data []byte
	for i, _ := range original {
		if original[i] == 0xff && !byte_num {
			byte_num = true
			continue
		}
		if byte_num {
			if original[i] == 0xff {
				data = append(data, 0xfe)
			} else if original[i] == 0xfe {
				data = append(data, 0xff)
			}
			byte_num = false
		} else {
			data = append(data, original[i]-1)
		}
	}
	for i := 0; i < len(data)/6; i++ {
		_ = data[i*6+1]
		_ = data[i*6+5]
		Torque = append(Torque, uint16(data[i*6])|uint16(data[i*6+1])<<8)
		Angle = append(Angle, uint32(data[i*6+2])|uint32(data[i*6+3])<<8|uint32(data[i*6+4])<<16|uint32(data[i*6+5])<<24)
	}
	return
}

func main() {
	h := []byte{0x4A, 0x01, 0x5D, 0x1a, 0x01, 0x01, 0x4c, 0x01, 0x50, 0xfa, 0x01, 0x01,
		0x4A, 0x01, 0x5D, 0x1a, 0x01, 0x01, 0x4c, 0x01, 0x50, 0xfa, 0x01, 0x01,
		0x4A, 0x01, 0x5D, 0x1a, 0x01, 0x01, 0x4c, 0x01, 0x50, 0xfa, 0x01, 0x01,
		0x4A, 0x01, 0x5D, 0x1a, 0x01, 0x01, 0x4c, 0x02, 0x50, 0xfa, 0x01, 0x01,
		0x4A, 0x01, 0x5D, 0x1a, 0x01, 0x01, 0x4c, 0x01, 0x50, 0xfa, 0x01, 0x01,
		0x4A, 0x01, 0x5D, 0x1a, 0x01, 0x01, 0x4c, 0x01, 0x50, 0xfa, 0x01, 0x01,
		0x4A, 0x01, 0x5D, 0x1a, 0x01, 0x01, 0x4c, 0x03, 0x50, 0xfa, 0x01, 0x01,
		0x4A, 0x01, 0x5D, 0x1a, 0x01, 0x01, 0x4c, 0x04, 0x50, 0xfa, 0x01, 0x01,
		0x4A, 0x01, 0x5D, 0x1a, 0x01, 0x01, 0x4c, 0x01, 0x50, 0xfa, 0x01, 0x01,
		0x4A, 0x01, 0x5D, 0x1a, 0x05, 0x01, 0x4c, 0x01, 0x50, 0xfa, 0x01, 0x01,
		0x4A, 0x01, 0x5D, 0x1a, 0x01, 0x01, 0x4c, 0x01, 0x50, 0xfa, 0x01, 0x01,
		0x4A, 0x01, 0x5D, 0x1a, 0x01, 0x01, 0x4c, 0x05, 0x50, 0xfa, 0x01, 0x01}
	fmt.Printf("%X\n", h)

	e, f := Data_decoding(h)
	fmt.Println(e, "\n", f)
}
