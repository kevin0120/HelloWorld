package httpd

import (
	"github.com/gobuffalo/packr"
	"github.com/kataras/iris/v12"
	"github.com/masami10/rush/utils"
	"io/ioutil"
)

func init() {
	// api.json
	// use packr to get this file
	packr.PackJSONBytes("../../etc/rush", "api.json", "\"\"")
}

type Methods struct {
	service *Service
}

type HMICommonResponse struct {
	StatusCode int    `json:"status_code"`
	Message    string `json:"msg"`
	Extra      string `json:"extra"`
}

func newHttpMethods(s *Service) Methods {
	return Methods{
		service: s,
	}
}

func (m *Methods) getDoc(ctx iris.Context) {
	var f []byte
	var err error
	exist, err := utils.FileIsExist(m.service.ApiDoc)
	if err != nil || !exist {
		box := packr.NewBox("../../etc/rush")
		f, err = box.Find("api.json")
	} else {
		f, err = ioutil.ReadFile(m.service.ApiDoc)
	}

	if err != nil {
		ctx.Write([]byte(err.Error()))
	}

	ctx.Header("content-type", "application/json")
	ctx.Write(f) //nolint
}

//
func NewCommonResponseBody(resp *HMICommonResponse, ctx iris.Context) error {
	ctx.StatusCode(resp.StatusCode)
	if _, err := ctx.JSON(resp); err != nil {
		return err
	}
	return nil
}
